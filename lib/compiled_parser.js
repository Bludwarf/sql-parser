/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[5,26],$V2=[1,14],$V3=[1,13],$V4=[5,26,31,42],$V5=[1,17],$V6=[5,26,31,42,43,52],$V7=[1,27],$V8=[1,29],$V9=[1,38],$Va=[1,42],$Vb=[1,43],$Vc=[1,39],$Vd=[1,40],$Ve=[1,37],$Vf=[1,41],$Vg=[1,25],$Vh=[5,26,31],$Vi=[5,26,31,42,43],$Vj=[1,55],$Vk=[18,47],$Vl=[1,58],$Vm=[1,59],$Vn=[1,60],$Vo=[1,61],$Vp=[5,18,23,26,31,34,37,38,41,42,43,47,52,54,55,56,57,58],$Vq=[5,18,23,26,31,34,37,38,41,42,43,47,49,52,54,55,56,57,58,59],$Vr=[1,66],$Vs=[2,71],$Vt=[1,78],$Vu=[1,79],$Vv=[1,94],$Vw=[5,26,31,42,47],$Vx=[1,98],$Vy=[5,26,31,42,43,47,54],$Vz=[5,26,31,41,42,43,52],$VA=[1,101],$VB=[1,102],$VC=[1,103],$VD=[5,26,31,34,35,37,38,41,42,43,52],$VE=[5,26,31,34,37,38,41,42,43,52];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"Query":4,"EOF":5,"SelectQuery":6,"Unions":7,"SelectWithLimitQuery":8,"BasicSelectQuery":9,"Select":10,"OrderClause":11,"GroupClause":12,"LimitClause":13,"SelectClause":14,"WhereClause":15,"SELECT":16,"Fields":17,"FROM":18,"Table":19,"DISTINCT":20,"Joins":21,"Literal":22,"AS":23,"LEFT_PAREN":24,"List":25,"RIGHT_PAREN":26,"WINDOW":27,"WINDOW_FUNCTION":28,"Number":29,"Union":30,"UNION":31,"ALL":32,"Join":33,"JOIN":34,"ON":35,"Expression":36,"LEFT":37,"RIGHT":38,"INNER":39,"OUTER":40,"WHERE":41,"LIMIT":42,"ORDER":43,"BY":44,"OrderArgs":45,"OrderArg":46,"SEPARATOR":47,"Value":48,"DIRECTION":49,"GroupBasicClause":50,"HavingClause":51,"GROUP":52,"ArgumentList":53,"HAVING":54,"MATH":55,"MATH_MULTI":56,"OPERATOR":57,"CONDITIONAL":58,"SUB_SELECT_OP":59,"SubSelectExpression":60,"SUB_SELECT_UNARY_OP":61,"String":62,"Function":63,"UserFunction":64,"Boolean":65,"Parameter":66,"NUMBER":67,"BOOLEAN":68,"PARAMETER":69,"STRING":70,"DBLSTRING":71,"LITERAL":72,"DOT":73,"FUNCTION":74,"AggregateArgumentList":75,"Field":76,"STAR":77,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"SELECT",18:"FROM",20:"DISTINCT",23:"AS",24:"LEFT_PAREN",26:"RIGHT_PAREN",27:"WINDOW",28:"WINDOW_FUNCTION",31:"UNION",32:"ALL",34:"JOIN",35:"ON",37:"LEFT",38:"RIGHT",39:"INNER",40:"OUTER",41:"WHERE",42:"LIMIT",43:"ORDER",44:"BY",47:"SEPARATOR",49:"DIRECTION",52:"GROUP",54:"HAVING",55:"MATH",56:"MATH_MULTI",57:"OPERATOR",58:"CONDITIONAL",59:"SUB_SELECT_OP",61:"SUB_SELECT_UNARY_OP",67:"NUMBER",68:"BOOLEAN",69:"PARAMETER",70:"STRING",71:"DBLSTRING",72:"LITERAL",73:"DOT",74:"FUNCTION",77:"STAR"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[9,1],[9,2],[9,2],[9,3],[8,2],[10,1],[10,2],[14,4],[14,5],[14,5],[14,6],[19,1],[19,2],[19,3],[19,3],[19,3],[19,4],[19,6],[7,1],[7,2],[30,2],[30,3],[21,1],[21,2],[33,4],[33,5],[33,5],[33,6],[33,6],[33,6],[33,6],[15,2],[13,2],[11,3],[45,1],[45,3],[46,1],[46,2],[12,1],[12,2],[50,3],[51,2],[36,3],[36,3],[36,3],[36,3],[36,3],[36,5],[36,3],[36,2],[36,1],[60,3],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[25,1],[29,1],[65,1],[66,1],[62,1],[62,1],[22,1],[22,3],[63,4],[64,4],[75,1],[75,2],[53,1],[53,3],[17,1],[17,3],[76,1],[76,1],[76,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return this.$ = $$[$0-1];
break;
case 2: case 4: case 5: case 6: case 11: case 44: case 56: case 58: case 59: case 60: case 61: case 62: case 63: case 64:
this.$ = $$[$0];
break;
case 3:
this.$ = (function () {
        $$[$0-1].unions = $$[$0];
        return $$[$0-1];
      }());
break;
case 7:
this.$ = (function () {
        $$[$0-1].order = $$[$0];
        return $$[$0-1];
      }());
break;
case 8:
this.$ = (function () {
        $$[$0-1].group = $$[$0];
        return $$[$0-1];
      }());
break;
case 9:
this.$ = (function () {
        $$[$0-2].group = $$[$0-1];
        $$[$0-2].order = $$[$0];
        return $$[$0-2];
      }());
break;
case 10:
this.$ = (function () {
        $$[$0-1].limit = $$[$0];
        return $$[$0-1];
      }());
break;
case 12:
this.$ = (function () {
        $$[$0-1].where = $$[$0];
        return $$[$0-1];
      }());
break;
case 13:
this.$ = new yy.Select($$[$0-2], $$[$0], false);
break;
case 14:
this.$ = new yy.Select($$[$0-2], $$[$0], true);
break;
case 15:
this.$ = new yy.Select($$[$0-3], $$[$0-1], false, $$[$0]);
break;
case 16:
this.$ = new yy.Select($$[$0-3], $$[$0-1], true, $$[$0]);
break;
case 17:
this.$ = new yy.Table($$[$0]);
break;
case 18:
this.$ = new yy.Table($$[$0-1], $$[$0]);
break;
case 19:
this.$ = new yy.Table($$[$0-2], $$[$0]);
break;
case 20: case 48:
this.$ = $$[$0-1];
break;
case 21: case 57:
this.$ = new yy.SubSelect($$[$0-1]);
break;
case 22:
this.$ = new yy.SubSelect($$[$0-2], $$[$0]);
break;
case 23:
this.$ = new yy.Table($$[$0-5], null, $$[$0-4], $$[$0-3], $$[$0-1]);
break;
case 24: case 28: case 40: case 77: case 79:
this.$ = [$$[$0]];
break;
case 25:
this.$ = $$[$0-1].concat($$[$01]);
break;
case 26:
this.$ = new yy.Union($$[$0]);
break;
case 27:
this.$ = new yy.Union($$[$0], true);
break;
case 29:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 30:
this.$ = new yy.Join($$[$0-2], $$[$0]);
break;
case 31:
this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT');
break;
case 32:
this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT');
break;
case 33:
this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT', 'INNER');
break;
case 34:
this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT', 'INNER');
break;
case 35:
this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT', 'OUTER');
break;
case 36:
this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT', 'OUTER');
break;
case 37:
this.$ = new yy.Where($$[$0]);
break;
case 38:
this.$ = new yy.Limit($$[$0]);
break;
case 39:
this.$ = new yy.Order($$[$0]);
break;
case 41: case 78: case 80:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 42:
this.$ = new yy.OrderArgument($$[$0], 'ASC');
break;
case 43:
this.$ = new yy.OrderArgument($$[$0-1], $$[$0]);
break;
case 45:
this.$ = (function () {
        $$[$0-1].having = $$[$0];
        return $$[$0-1];
      }());
break;
case 46:
this.$ = new yy.Group($$[$0]);
break;
case 47:
this.$ = new yy.Having($$[$0]);
break;
case 49: case 50: case 51: case 52: case 54:
this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 53:
this.$ = new yy.Op($$[$0-3], $$[$0-4], $$[$0-1]);
break;
case 55:
this.$ = new yy.UnaryOp($$[$0-1], $$[$0]);
break;
case 65:
this.$ = new yy.ListValue($$[$0]);
break;
case 66:
this.$ = new yy.NumberValue($$[$0]);
break;
case 67:
this.$ = new yy.BooleanValue($$[$0]);
break;
case 68:
this.$ = new yy.ParameterValue($$[$0]);
break;
case 69:
this.$ = new yy.StringValue($$[$0], "'");
break;
case 70:
this.$ = new yy.StringValue($$[$0], '"');
break;
case 71:
this.$ = new yy.LiteralValue($$[$0]);
break;
case 72:
this.$ = new yy.LiteralValue($$[$0-2], $$[$0]);
break;
case 73:
this.$ = new yy.FunctionValue($$[$0-3], $$[$0-1]);
break;
case 74:
this.$ = new yy.FunctionValue($$[$0-3], $$[$0-1], true);
break;
case 75:
this.$ = new yy.ArgumentListValue($$[$0]);
break;
case 76:
this.$ = new yy.ArgumentListValue($$[$0], true);
break;
case 81:
this.$ = new yy.Star();
break;
case 82:
this.$ = new yy.Field($$[$0]);
break;
case 83:
this.$ = new yy.Field($$[$0-2], $$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,8:4,9:5,10:6,14:7,16:$V0},{1:[3]},{5:[1,9]},o($V1,[2,2],{7:10,13:11,30:12,31:$V2,42:$V3}),o($V4,[2,4]),o($V4,[2,5]),o($V4,[2,6],{11:15,12:16,50:18,43:$V5,52:[1,19]}),o($V6,[2,11],{15:20,41:[1,21]}),{17:22,20:[1,23],22:30,24:$V7,29:31,36:26,48:28,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf,76:24,77:$Vg},{1:[2,1]},o($V1,[2,3],{30:44,31:$V2}),o($V4,[2,10]),o($Vh,[2,24]),{29:45,67:$V9},{6:46,8:4,9:5,10:6,14:7,16:$V0,32:[1,47]},o($V4,[2,7]),o($V4,[2,8],{11:48,43:$V5}),{44:[1,49]},o($Vi,[2,44],{51:50,54:[1,51]}),{44:[1,52]},o($V6,[2,12]),{22:30,24:$V7,29:31,36:53,48:28,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},{18:[1,54],47:$Vj},{17:56,22:30,24:$V7,29:31,36:26,48:28,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf,76:24,77:$Vg},o($Vk,[2,79]),o($Vk,[2,81]),o($Vk,[2,82],{23:[1,57],55:$Vl,56:$Vm,57:$Vn,58:$Vo}),{22:30,24:$V7,29:31,36:62,48:28,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},o($Vp,[2,56],{59:[1,63]}),{24:[1,65],60:64},o($Vq,[2,58],{73:$Vr}),o($Vq,[2,59]),o($Vq,[2,60]),o($Vq,[2,61]),o($Vq,[2,62]),o($Vq,[2,63]),o($Vq,[2,64]),o([5,18,23,26,31,34,37,38,41,42,43,47,49,52,54,55,56,57,58,59,73],$Vs,{24:[1,67]}),o($Vq,[2,66]),o($Vq,[2,69]),o($Vq,[2,70]),{24:[1,68]},o($Vq,[2,67]),o($Vq,[2,68]),o($Vh,[2,25]),o($V4,[2,38]),o($Vh,[2,26],{13:11,42:$V3}),{6:69,8:4,9:5,10:6,14:7,16:$V0},o($V4,[2,9]),{22:30,29:31,45:70,46:71,48:72,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},o($Vi,[2,45]),{22:30,24:$V7,29:31,36:73,48:28,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},{22:30,24:$V7,29:31,36:75,48:28,53:74,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},o($V6,[2,37],{55:$Vl,56:$Vm,57:$Vn,58:$Vo}),{19:76,22:77,24:$Vt,72:$Vu},{22:30,24:$V7,29:31,36:26,48:28,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf,76:80,77:$Vg},{18:[1,81],47:$Vj},{22:82,72:$Vu},{22:30,24:$V7,29:31,36:83,48:28,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},{22:30,24:$V7,29:31,36:84,48:28,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},{22:30,24:$V7,29:31,36:85,48:28,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},{22:30,24:$V7,29:31,36:86,48:28,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},{26:[1,87],55:$Vl,56:$Vm,57:$Vn,58:$Vo},{24:[1,88],60:89},o($Vp,[2,55]),{4:90,6:3,8:4,9:5,10:6,14:7,16:$V0},{72:[1,91]},{20:$Vv,22:30,24:$V7,29:31,36:75,48:28,53:93,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf,75:92},{20:$Vv,22:30,24:$V7,29:31,36:75,48:28,53:93,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf,75:95},o($Vh,[2,27],{13:11,42:$V3}),o($V4,[2,39],{47:[1,96]}),o($Vw,[2,40]),o($Vw,[2,42],{49:[1,97]}),o($Vi,[2,47],{55:$Vl,56:$Vm,57:$Vn,58:$Vo}),o([5,26,31,42,43,54],[2,46],{47:$Vx}),o($Vy,[2,77],{55:$Vl,56:$Vm,57:$Vn,58:$Vo}),o($Vz,[2,13],{21:99,33:100,34:$VA,37:$VB,38:$VC}),o($VD,[2,17],{22:104,23:[1,105],27:[1,106],72:$Vu,73:$Vr}),{4:108,6:3,8:4,9:5,10:6,14:7,16:$V0,22:30,24:$V7,25:107,29:31,36:75,48:28,53:109,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},o([5,18,23,26,27,31,34,35,37,38,41,42,43,47,52,72,73],$Vs),o($Vk,[2,80]),{19:110,22:77,24:$Vt,72:$Vu},o($Vk,[2,83],{73:$Vr}),o([5,18,23,26,31,34,37,38,41,42,43,47,52,54,55,57,58],[2,49],{56:$Vm}),o($Vp,[2,50]),o([5,18,23,26,31,34,37,38,41,42,43,47,52,54,57,58],[2,51],{55:$Vl,56:$Vm}),o([5,18,23,26,31,34,37,38,41,42,43,47,52,54,58],[2,52],{55:$Vl,56:$Vm,57:$Vn}),o($Vp,[2,48]),{4:90,6:3,8:4,9:5,10:6,14:7,16:$V0,22:30,24:$V7,25:111,29:31,36:75,48:28,53:109,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},o($Vp,[2,54]),{26:[1,112]},o([5,18,23,26,27,31,34,35,37,38,41,42,43,47,49,52,54,55,56,57,58,59,72,73],[2,72]),{26:[1,113]},{26:[2,75],47:$Vx},{22:30,24:$V7,29:31,36:75,48:28,53:114,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},{26:[1,115]},{22:30,29:31,46:116,48:72,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},o($Vw,[2,43]),{22:30,29:31,48:117,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},o($Vz,[2,15],{33:118,34:$VA,37:$VB,38:$VC}),o($VE,[2,28]),{19:119,22:77,24:$Vt,72:$Vu},{34:[1,120],39:[1,121],40:[1,122]},{34:[1,123],39:[1,124],40:[1,125]},o($VD,[2,18],{73:$Vr}),{22:126,72:$Vu},{28:[1,127]},{26:[1,128]},{26:[1,129]},{26:[2,65],47:$Vx},o($Vz,[2,14],{33:100,21:130,34:$VA,37:$VB,38:$VC}),{26:[1,131]},o($Vp,[2,57]),o($Vq,[2,74]),{26:[2,76],47:$Vx},o($Vq,[2,73]),o($Vw,[2,41]),o($Vy,[2,78]),o($VE,[2,29]),{35:[1,132]},{19:133,22:77,24:$Vt,72:$Vu},{34:[1,134]},{34:[1,135]},{19:136,22:77,24:$Vt,72:$Vu},{34:[1,137]},{34:[1,138]},o($VD,[2,19],{73:$Vr}),{24:[1,139]},o($VD,[2,20]),o($VD,[2,21],{22:140,72:$Vu}),o($Vz,[2,16],{33:118,34:$VA,37:$VB,38:$VC}),o($Vp,[2,53]),{22:30,24:$V7,29:31,36:141,48:28,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},{35:[1,142]},{19:143,22:77,24:$Vt,72:$Vu},{19:144,22:77,24:$Vt,72:$Vu},{35:[1,145]},{19:146,22:77,24:$Vt,72:$Vu},{19:147,22:77,24:$Vt,72:$Vu},{29:148,67:$V9},o($VD,[2,22],{73:$Vr}),o($VE,[2,30],{55:$Vl,56:$Vm,57:$Vn,58:$Vo}),{22:30,24:$V7,29:31,36:149,48:28,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},{35:[1,150]},{35:[1,151]},{22:30,24:$V7,29:31,36:152,48:28,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},{35:[1,153]},{35:[1,154]},{26:[1,155]},o($VE,[2,31],{55:$Vl,56:$Vm,57:$Vn,58:$Vo}),{22:30,24:$V7,29:31,36:156,48:28,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},{22:30,24:$V7,29:31,36:157,48:28,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},o($VE,[2,32],{55:$Vl,56:$Vm,57:$Vn,58:$Vo}),{22:30,24:$V7,29:31,36:158,48:28,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},{22:30,24:$V7,29:31,36:159,48:28,61:$V8,62:32,63:33,64:34,65:35,66:36,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,74:$Vf},o($VD,[2,23]),o($VE,[2,33],{55:$Vl,56:$Vm,57:$Vn,58:$Vo}),o($VE,[2,35],{55:$Vl,56:$Vm,57:$Vn,58:$Vo}),o($VE,[2,34],{55:$Vl,56:$Vm,57:$Vn,58:$Vo}),o($VE,[2,36],{55:$Vl,56:$Vm,57:$Vn,58:$Vo})],
defaultActions: {9:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}