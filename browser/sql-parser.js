(function(root) {
  var SQLParser = function() {
    function require(path){ return require[path]; }
    require['./lexer'] = new function() {
  var exports = this;
  // Generated by CoffeeScript 1.8.0
(function() {
  var Lexer;

  Lexer = (function() {
    var BOOLEAN, DBLSTRING, LITERAL, MATH, MATH_MULTI, NUMBER, SEPARATOR, SQL_CONDITIONALS, SQL_FUNCTIONS, SQL_KEYWORDS, SQL_OPERATORS, SQL_SORT_ORDERS, STAR, STRING, SUB_SELECT_OP, SUB_SELECT_UNARY_OP, WHITESPACE;

    function Lexer(sql, opts) {
      var bytesConsumed, i;
      if (opts == null) {
        opts = {};
      }
      this.sql = sql;
      this.preserveWhitespace = opts.preserveWhitespace || false;
      this.tokens = [];
      this.currentLine = 1;
      i = 0;
      while (this.chunk = sql.slice(i)) {
        bytesConsumed = this.keywordToken() || this.starToken() || this.booleanToken() || this.functionToken() || this.windowExtension() || this.sortOrderToken() || this.seperatorToken() || this.operatorToken() || this.mathToken() || this.dotToken() || this.conditionalToken() || this.subSelectOpToken() || this.subSelectUnaryOpToken() || this.numberToken() || this.stringToken() || this.parensToken() || this.whitespaceToken() || this.literalToken();
        if (bytesConsumed < 1) {
          throw new Error("NOTHING CONSUMED: Stopped at - '" + (this.chunk.slice(0, 30)) + "'");
        }
        i += bytesConsumed;
      }
      this.token('EOF', '');
      this.postProcess();
    }

    Lexer.prototype.postProcess = function() {
      var i, next_token, token, _i, _len, _ref, _results;
      _ref = this.tokens;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        token = _ref[i];
        if (token[0] === 'STAR') {
          next_token = this.tokens[i + 1];
          if (!(next_token[0] === 'SEPARATOR' || next_token[0] === 'FROM')) {
            _results.push(token[0] = 'MATH_MULTI');
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Lexer.prototype.token = function(name, value) {
      return this.tokens.push([name, value, this.currentLine]);
    };

    Lexer.prototype.tokenizeFromRegex = function(name, regex, part, lengthPart, output) {
      var match, partMatch;
      if (part == null) {
        part = 0;
      }
      if (lengthPart == null) {
        lengthPart = part;
      }
      if (output == null) {
        output = true;
      }
      if (!(match = regex.exec(this.chunk))) {
        return 0;
      }
      partMatch = match[part];
      if (output) {
        this.token(name, partMatch);
      }
      return match[lengthPart].length;
    };

    Lexer.prototype.tokenizeFromWord = function(name, word) {
      var match, matcher;
      if (word == null) {
        word = name;
      }
      word = this.regexEscape(word);
      matcher = /^\w+$/.test(word) ? new RegExp("^(" + word + ")\\b", 'ig') : new RegExp("^(" + word + ")", 'ig');
      match = matcher.exec(this.chunk);
      if (!match) {
        return 0;
      }
      this.token(name, match[1]);
      return match[1].length;
    };

    Lexer.prototype.tokenizeFromList = function(name, list) {
      var entry, ret, _i, _len;
      ret = 0;
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        entry = list[_i];
        ret = this.tokenizeFromWord(name, entry);
        if (ret > 0) {
          break;
        }
      }
      return ret;
    };

    Lexer.prototype.keywordToken = function() {
      return this.tokenizeFromWord('SELECT') || this.tokenizeFromWord('DISTINCT') || this.tokenizeFromWord('FROM') || this.tokenizeFromWord('WHERE') || this.tokenizeFromWord('GROUP') || this.tokenizeFromWord('ORDER') || this.tokenizeFromWord('BY') || this.tokenizeFromWord('HAVING') || this.tokenizeFromWord('LIMIT') || this.tokenizeFromWord('JOIN') || this.tokenizeFromWord('LEFT') || this.tokenizeFromWord('RIGHT') || this.tokenizeFromWord('INNER') || this.tokenizeFromWord('OUTER') || this.tokenizeFromWord('ON') || this.tokenizeFromWord('AS') || this.tokenizeFromWord('UNION') || this.tokenizeFromWord('ALL');
    };

    Lexer.prototype.dotToken = function() {
      return this.tokenizeFromWord('DOT', '.');
    };

    Lexer.prototype.operatorToken = function() {
      return this.tokenizeFromList('OPERATOR', SQL_OPERATORS);
    };

    Lexer.prototype.mathToken = function() {
      return this.tokenizeFromList('MATH', MATH) || this.tokenizeFromList('MATH_MULTI', MATH_MULTI);
    };

    Lexer.prototype.conditionalToken = function() {
      return this.tokenizeFromList('CONDITIONAL', SQL_CONDITIONALS);
    };

    Lexer.prototype.subSelectOpToken = function() {
      return this.tokenizeFromList('SUB_SELECT_OP', SUB_SELECT_OP);
    };

    Lexer.prototype.subSelectUnaryOpToken = function() {
      return this.tokenizeFromList('SUB_SELECT_UNARY_OP', SUB_SELECT_UNARY_OP);
    };

    Lexer.prototype.functionToken = function() {
      return this.tokenizeFromList('FUNCTION', SQL_FUNCTIONS);
    };

    Lexer.prototype.sortOrderToken = function() {
      return this.tokenizeFromList('DIRECTION', SQL_SORT_ORDERS);
    };

    Lexer.prototype.booleanToken = function() {
      return this.tokenizeFromList('BOOLEAN', BOOLEAN);
    };

    Lexer.prototype.starToken = function() {
      return this.tokenizeFromRegex('STAR', STAR);
    };

    Lexer.prototype.seperatorToken = function() {
      return this.tokenizeFromRegex('SEPARATOR', SEPARATOR);
    };

    Lexer.prototype.literalToken = function() {
      return this.tokenizeFromRegex('LITERAL', LITERAL, 1, 0);
    };

    Lexer.prototype.numberToken = function() {
      return this.tokenizeFromRegex('NUMBER', NUMBER);
    };

    Lexer.prototype.stringToken = function() {
      return this.tokenizeFromRegex('STRING', STRING, 1, 0) || this.tokenizeFromRegex('DBLSTRING', DBLSTRING, 1, 0);
    };

    Lexer.prototype.parensToken = function() {
      return this.tokenizeFromRegex('LEFT_PAREN', /^\(/) || this.tokenizeFromRegex('RIGHT_PAREN', /^\)/);
    };

    Lexer.prototype.windowExtension = function() {
      var match;
      match = /^\.(win):(length|time)/i.exec(this.chunk);
      if (!match) {
        return 0;
      }
      this.token('WINDOW', match[1]);
      this.token('WINDOW_FUNCTION', match[2]);
      return match[0].length;
    };

    Lexer.prototype.whitespaceToken = function() {
      var match, newlines, partMatch;
      if (!(match = WHITESPACE.exec(this.chunk))) {
        return 0;
      }
      partMatch = match[0];
      newlines = partMatch.replace(/[^\n]/, '').length;
      this.currentLine += newlines;
      if (this.preserveWhitespace) {
        this.token(name, partMatch);
      }
      return partMatch.length;
    };

    Lexer.prototype.regexEscape = function(str) {
      return str.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    };

    SQL_KEYWORDS = ['SELECT', 'FROM', 'WHERE', 'GROUP BY', 'ORDER BY', 'HAVING', 'AS'];

    SQL_FUNCTIONS = ['AVG', 'COUNT', 'MIN', 'MAX', 'SUM'];

    SQL_SORT_ORDERS = ['ASC', 'DESC'];

    SQL_OPERATORS = ['=', '!=', '>=', '>', '<=', '<>', '<', 'LIKE', 'IS NOT', 'IS'];

    SUB_SELECT_OP = ['IN', 'NOT IN', 'ANY', 'ALL', 'SOME'];

    SUB_SELECT_UNARY_OP = ['EXISTS'];

    SQL_CONDITIONALS = ['AND', 'OR'];

    BOOLEAN = ['TRUE', 'FALSE', 'NULL'];

    MATH = ['+', '-'];

    MATH_MULTI = ['/', '*'];

    STAR = /^\*/;

    SEPARATOR = /^,/;

    WHITESPACE = /^[ \n\r]+/;

    LITERAL = /^`?([a-z_][a-z0-9_]{0,})`?/i;

    NUMBER = /^[0-9]+(\.[0-9]+)?/;

    STRING = /^'([^\\']*(?:\\.[^\\']*)*)'/;

    DBLSTRING = /^"([^\\"]*(?:\\.[^\\"]*)*)"/;

    return Lexer;

  })();

  exports.tokenize = function(sql, opts) {
    return (new Lexer(sql, opts)).tokens;
  };

}).call(this);

};require['./compiled_parser'] = new function() {
  var exports = this;
  /* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[5,26],$V2=[1,14],$V3=[1,13],$V4=[5,26,31,42],$V5=[1,17],$V6=[5,26,31,42,43,52],$V7=[1,27],$V8=[1,29],$V9=[1,37],$Va=[1,41],$Vb=[1,38],$Vc=[1,39],$Vd=[1,36],$Ve=[1,40],$Vf=[1,25],$Vg=[5,26,31],$Vh=[5,26,31,42,43],$Vi=[1,53],$Vj=[18,47],$Vk=[1,56],$Vl=[1,57],$Vm=[1,58],$Vn=[1,59],$Vo=[5,18,23,26,31,34,37,38,41,42,43,47,52,54,55,56,57,58],$Vp=[5,18,23,26,31,34,37,38,41,42,43,47,49,52,54,55,56,57,58,59],$Vq=[1,64],$Vr=[2,69],$Vs=[1,76],$Vt=[1,77],$Vu=[1,92],$Vv=[5,26,31,42,47],$Vw=[1,96],$Vx=[5,26,31,42,43,47,54],$Vy=[5,26,31,41,42,43,52],$Vz=[1,99],$VA=[1,100],$VB=[1,101],$VC=[5,26,31,34,35,37,38,41,42,43,52],$VD=[5,26,31,34,37,38,41,42,43,52];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"Query":4,"EOF":5,"SelectQuery":6,"Unions":7,"SelectWithLimitQuery":8,"BasicSelectQuery":9,"Select":10,"OrderClause":11,"GroupClause":12,"LimitClause":13,"SelectClause":14,"WhereClause":15,"SELECT":16,"Fields":17,"FROM":18,"Table":19,"DISTINCT":20,"Joins":21,"Literal":22,"AS":23,"LEFT_PAREN":24,"List":25,"RIGHT_PAREN":26,"WINDOW":27,"WINDOW_FUNCTION":28,"Number":29,"Union":30,"UNION":31,"ALL":32,"Join":33,"JOIN":34,"ON":35,"Expression":36,"LEFT":37,"RIGHT":38,"INNER":39,"OUTER":40,"WHERE":41,"LIMIT":42,"ORDER":43,"BY":44,"OrderArgs":45,"OrderArg":46,"SEPARATOR":47,"Value":48,"DIRECTION":49,"GroupBasicClause":50,"HavingClause":51,"GROUP":52,"ArgumentList":53,"HAVING":54,"MATH":55,"MATH_MULTI":56,"OPERATOR":57,"CONDITIONAL":58,"SUB_SELECT_OP":59,"SubSelectExpression":60,"SUB_SELECT_UNARY_OP":61,"String":62,"Function":63,"UserFunction":64,"Boolean":65,"NUMBER":66,"BOOLEAN":67,"STRING":68,"DBLSTRING":69,"LITERAL":70,"DOT":71,"FUNCTION":72,"AggregateArgumentList":73,"Field":74,"STAR":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"SELECT",18:"FROM",20:"DISTINCT",23:"AS",24:"LEFT_PAREN",26:"RIGHT_PAREN",27:"WINDOW",28:"WINDOW_FUNCTION",31:"UNION",32:"ALL",34:"JOIN",35:"ON",37:"LEFT",38:"RIGHT",39:"INNER",40:"OUTER",41:"WHERE",42:"LIMIT",43:"ORDER",44:"BY",47:"SEPARATOR",49:"DIRECTION",52:"GROUP",54:"HAVING",55:"MATH",56:"MATH_MULTI",57:"OPERATOR",58:"CONDITIONAL",59:"SUB_SELECT_OP",61:"SUB_SELECT_UNARY_OP",66:"NUMBER",67:"BOOLEAN",68:"STRING",69:"DBLSTRING",70:"LITERAL",71:"DOT",72:"FUNCTION",75:"STAR"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[9,1],[9,2],[9,2],[9,3],[8,2],[10,1],[10,2],[14,4],[14,5],[14,5],[14,6],[19,1],[19,2],[19,3],[19,3],[19,3],[19,4],[19,6],[7,1],[7,2],[30,2],[30,3],[21,1],[21,2],[33,4],[33,5],[33,5],[33,6],[33,6],[33,6],[33,6],[15,2],[13,2],[11,3],[45,1],[45,3],[46,1],[46,2],[12,1],[12,2],[50,3],[51,2],[36,3],[36,3],[36,3],[36,3],[36,3],[36,5],[36,3],[36,2],[36,1],[60,3],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[25,1],[29,1],[65,1],[62,1],[62,1],[22,1],[22,3],[63,4],[64,4],[73,1],[73,2],[53,1],[53,3],[17,1],[17,3],[74,1],[74,1],[74,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return this.$ = $$[$0-1];
break;
case 2: case 4: case 5: case 6: case 11: case 44: case 56: case 58: case 59: case 60: case 61: case 62: case 63:
this.$ = $$[$0];
break;
case 3:
this.$ = (function () {
        $$[$0-1].unions = $$[$0];
        return $$[$0-1];
      }());
break;
case 7:
this.$ = (function () {
        $$[$0-1].order = $$[$0];
        return $$[$0-1];
      }());
break;
case 8:
this.$ = (function () {
        $$[$0-1].group = $$[$0];
        return $$[$0-1];
      }());
break;
case 9:
this.$ = (function () {
        $$[$0-2].group = $$[$0-1];
        $$[$0-2].order = $$[$0];
        return $$[$0-2];
      }());
break;
case 10:
this.$ = (function () {
        $$[$0-1].limit = $$[$0];
        return $$[$0-1];
      }());
break;
case 12:
this.$ = (function () {
        $$[$0-1].where = $$[$0];
        return $$[$0-1];
      }());
break;
case 13:
this.$ = new yy.Select($$[$0-2], $$[$0], false);
break;
case 14:
this.$ = new yy.Select($$[$0-2], $$[$0], true);
break;
case 15:
this.$ = new yy.Select($$[$0-3], $$[$0-1], false, $$[$0]);
break;
case 16:
this.$ = new yy.Select($$[$0-3], $$[$0-1], true, $$[$0]);
break;
case 17:
this.$ = new yy.Table($$[$0]);
break;
case 18:
this.$ = new yy.Table($$[$0-1], $$[$0]);
break;
case 19:
this.$ = new yy.Table($$[$0-2], $$[$0]);
break;
case 20: case 48:
this.$ = $$[$0-1];
break;
case 21: case 57:
this.$ = new yy.SubSelect($$[$0-1]);
break;
case 22:
this.$ = new yy.SubSelect($$[$0-2], $$[$0]);
break;
case 23:
this.$ = new yy.Table($$[$0-5], null, $$[$0-4], $$[$0-3], $$[$0-1]);
break;
case 24: case 28: case 40: case 75: case 77:
this.$ = [$$[$0]];
break;
case 25:
this.$ = $$[$0-1].concat($$[$01]);
break;
case 26:
this.$ = new yy.Union($$[$0]);
break;
case 27:
this.$ = new yy.Union($$[$0], true);
break;
case 29:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 30:
this.$ = new yy.Join($$[$0-2], $$[$0]);
break;
case 31:
this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT');
break;
case 32:
this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT');
break;
case 33:
this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT', 'INNER');
break;
case 34:
this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT', 'INNER');
break;
case 35:
this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT', 'OUTER');
break;
case 36:
this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT', 'OUTER');
break;
case 37:
this.$ = new yy.Where($$[$0]);
break;
case 38:
this.$ = new yy.Limit($$[$0]);
break;
case 39:
this.$ = new yy.Order($$[$0]);
break;
case 41: case 76: case 78:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 42:
this.$ = new yy.OrderArgument($$[$0], 'ASC');
break;
case 43:
this.$ = new yy.OrderArgument($$[$0-1], $$[$0]);
break;
case 45:
this.$ = (function () {
        $$[$0-1].having = $$[$0];
        return $$[$0-1];
      }());
break;
case 46:
this.$ = new yy.Group($$[$0]);
break;
case 47:
this.$ = new yy.Having($$[$0]);
break;
case 49: case 50: case 51: case 52: case 54:
this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 53:
this.$ = new yy.Op($$[$0-3], $$[$0-4], $$[$0-1]);
break;
case 55:
this.$ = new yy.UnaryOp($$[$0-1], $$[$0]);
break;
case 64:
this.$ = new yy.ListValue($$[$0]);
break;
case 65:
this.$ = new yy.NumberValue($$[$0]);
break;
case 66:
this.$ = new yy.BooleanValue($$[$0]);
break;
case 67:
this.$ = new yy.StringValue($$[$0], "'");
break;
case 68:
this.$ = new yy.StringValue($$[$0], '"');
break;
case 69:
this.$ = new yy.LiteralValue($$[$0]);
break;
case 70:
this.$ = new yy.LiteralValue($$[$0-2], $$[$0]);
break;
case 71:
this.$ = new yy.FunctionValue($$[$0-3], $$[$0-1]);
break;
case 72:
this.$ = new yy.FunctionValue($$[$0-3], $$[$0-1], true);
break;
case 73:
this.$ = new yy.ArgumentListValue($$[$0]);
break;
case 74:
this.$ = new yy.ArgumentListValue($$[$0], true);
break;
case 79:
this.$ = new yy.Star();
break;
case 80:
this.$ = new yy.Field($$[$0]);
break;
case 81:
this.$ = new yy.Field($$[$0-2], $$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,8:4,9:5,10:6,14:7,16:$V0},{1:[3]},{5:[1,9]},o($V1,[2,2],{7:10,13:11,30:12,31:$V2,42:$V3}),o($V4,[2,4]),o($V4,[2,5]),o($V4,[2,6],{11:15,12:16,50:18,43:$V5,52:[1,19]}),o($V6,[2,11],{15:20,41:[1,21]}),{17:22,20:[1,23],22:30,24:$V7,29:31,36:26,48:28,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,74:24,75:$Vf},{1:[2,1]},o($V1,[2,3],{30:42,31:$V2}),o($V4,[2,10]),o($Vg,[2,24]),{29:43,66:$V9},{6:44,8:4,9:5,10:6,14:7,16:$V0,32:[1,45]},o($V4,[2,7]),o($V4,[2,8],{11:46,43:$V5}),{44:[1,47]},o($Vh,[2,44],{51:48,54:[1,49]}),{44:[1,50]},o($V6,[2,12]),{22:30,24:$V7,29:31,36:51,48:28,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},{18:[1,52],47:$Vi},{17:54,22:30,24:$V7,29:31,36:26,48:28,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,74:24,75:$Vf},o($Vj,[2,77]),o($Vj,[2,79]),o($Vj,[2,80],{23:[1,55],55:$Vk,56:$Vl,57:$Vm,58:$Vn}),{22:30,24:$V7,29:31,36:60,48:28,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},o($Vo,[2,56],{59:[1,61]}),{24:[1,63],60:62},o($Vp,[2,58],{71:$Vq}),o($Vp,[2,59]),o($Vp,[2,60]),o($Vp,[2,61]),o($Vp,[2,62]),o($Vp,[2,63]),o([5,18,23,26,31,34,37,38,41,42,43,47,49,52,54,55,56,57,58,59,71],$Vr,{24:[1,65]}),o($Vp,[2,65]),o($Vp,[2,67]),o($Vp,[2,68]),{24:[1,66]},o($Vp,[2,66]),o($Vg,[2,25]),o($V4,[2,38]),o($Vg,[2,26],{13:11,42:$V3}),{6:67,8:4,9:5,10:6,14:7,16:$V0},o($V4,[2,9]),{22:30,29:31,45:68,46:69,48:70,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},o($Vh,[2,45]),{22:30,24:$V7,29:31,36:71,48:28,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},{22:30,24:$V7,29:31,36:73,48:28,53:72,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},o($V6,[2,37],{55:$Vk,56:$Vl,57:$Vm,58:$Vn}),{19:74,22:75,24:$Vs,70:$Vt},{22:30,24:$V7,29:31,36:26,48:28,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,74:78,75:$Vf},{18:[1,79],47:$Vi},{22:80,70:$Vt},{22:30,24:$V7,29:31,36:81,48:28,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},{22:30,24:$V7,29:31,36:82,48:28,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},{22:30,24:$V7,29:31,36:83,48:28,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},{22:30,24:$V7,29:31,36:84,48:28,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},{26:[1,85],55:$Vk,56:$Vl,57:$Vm,58:$Vn},{24:[1,86],60:87},o($Vo,[2,55]),{4:88,6:3,8:4,9:5,10:6,14:7,16:$V0},{70:[1,89]},{20:$Vu,22:30,24:$V7,29:31,36:73,48:28,53:91,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:90},{20:$Vu,22:30,24:$V7,29:31,36:73,48:28,53:91,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:93},o($Vg,[2,27],{13:11,42:$V3}),o($V4,[2,39],{47:[1,94]}),o($Vv,[2,40]),o($Vv,[2,42],{49:[1,95]}),o($Vh,[2,47],{55:$Vk,56:$Vl,57:$Vm,58:$Vn}),o([5,26,31,42,43,54],[2,46],{47:$Vw}),o($Vx,[2,75],{55:$Vk,56:$Vl,57:$Vm,58:$Vn}),o($Vy,[2,13],{21:97,33:98,34:$Vz,37:$VA,38:$VB}),o($VC,[2,17],{22:102,23:[1,103],27:[1,104],70:$Vt,71:$Vq}),{4:106,6:3,8:4,9:5,10:6,14:7,16:$V0,22:30,24:$V7,25:105,29:31,36:73,48:28,53:107,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},o([5,18,23,26,27,31,34,35,37,38,41,42,43,47,52,70,71],$Vr),o($Vj,[2,78]),{19:108,22:75,24:$Vs,70:$Vt},o($Vj,[2,81],{71:$Vq}),o([5,18,23,26,31,34,37,38,41,42,43,47,52,54,55,57,58],[2,49],{56:$Vl}),o($Vo,[2,50]),o([5,18,23,26,31,34,37,38,41,42,43,47,52,54,57,58],[2,51],{55:$Vk,56:$Vl}),o([5,18,23,26,31,34,37,38,41,42,43,47,52,54,58],[2,52],{55:$Vk,56:$Vl,57:$Vm}),o($Vo,[2,48]),{4:88,6:3,8:4,9:5,10:6,14:7,16:$V0,22:30,24:$V7,25:109,29:31,36:73,48:28,53:107,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},o($Vo,[2,54]),{26:[1,110]},o([5,18,23,26,27,31,34,35,37,38,41,42,43,47,49,52,54,55,56,57,58,59,70,71],[2,70]),{26:[1,111]},{26:[2,73],47:$Vw},{22:30,24:$V7,29:31,36:73,48:28,53:112,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},{26:[1,113]},{22:30,29:31,46:114,48:70,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},o($Vv,[2,43]),{22:30,29:31,48:115,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},o($Vy,[2,15],{33:116,34:$Vz,37:$VA,38:$VB}),o($VD,[2,28]),{19:117,22:75,24:$Vs,70:$Vt},{34:[1,118],39:[1,119],40:[1,120]},{34:[1,121],39:[1,122],40:[1,123]},o($VC,[2,18],{71:$Vq}),{22:124,70:$Vt},{28:[1,125]},{26:[1,126]},{26:[1,127]},{26:[2,64],47:$Vw},o($Vy,[2,14],{33:98,21:128,34:$Vz,37:$VA,38:$VB}),{26:[1,129]},o($Vo,[2,57]),o($Vp,[2,72]),{26:[2,74],47:$Vw},o($Vp,[2,71]),o($Vv,[2,41]),o($Vx,[2,76]),o($VD,[2,29]),{35:[1,130]},{19:131,22:75,24:$Vs,70:$Vt},{34:[1,132]},{34:[1,133]},{19:134,22:75,24:$Vs,70:$Vt},{34:[1,135]},{34:[1,136]},o($VC,[2,19],{71:$Vq}),{24:[1,137]},o($VC,[2,20]),o($VC,[2,21],{22:138,70:$Vt}),o($Vy,[2,16],{33:116,34:$Vz,37:$VA,38:$VB}),o($Vo,[2,53]),{22:30,24:$V7,29:31,36:139,48:28,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},{35:[1,140]},{19:141,22:75,24:$Vs,70:$Vt},{19:142,22:75,24:$Vs,70:$Vt},{35:[1,143]},{19:144,22:75,24:$Vs,70:$Vt},{19:145,22:75,24:$Vs,70:$Vt},{29:146,66:$V9},o($VC,[2,22],{71:$Vq}),o($VD,[2,30],{55:$Vk,56:$Vl,57:$Vm,58:$Vn}),{22:30,24:$V7,29:31,36:147,48:28,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},{35:[1,148]},{35:[1,149]},{22:30,24:$V7,29:31,36:150,48:28,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},{35:[1,151]},{35:[1,152]},{26:[1,153]},o($VD,[2,31],{55:$Vk,56:$Vl,57:$Vm,58:$Vn}),{22:30,24:$V7,29:31,36:154,48:28,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},{22:30,24:$V7,29:31,36:155,48:28,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},o($VD,[2,32],{55:$Vk,56:$Vl,57:$Vm,58:$Vn}),{22:30,24:$V7,29:31,36:156,48:28,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},{22:30,24:$V7,29:31,36:157,48:28,61:$V8,62:32,63:33,64:34,65:35,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve},o($VC,[2,23]),o($VD,[2,33],{55:$Vk,56:$Vl,57:$Vm,58:$Vn}),o($VD,[2,35],{55:$Vk,56:$Vl,57:$Vm,58:$Vn}),o($VD,[2,34],{55:$Vk,56:$Vl,57:$Vm,58:$Vn}),o($VD,[2,36],{55:$Vk,56:$Vl,57:$Vm,58:$Vn})],
defaultActions: {9:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
};require['./nodes'] = new function() {
  var exports = this;
  // Generated by CoffeeScript 1.8.0
(function() {
  var ArgumentListValue, Field, FunctionValue, Group, Having, Join, Limit, ListValue, LiteralValue, Op, Order, OrderArgument, Select, Star, StringValue, SubSelect, Table, UnaryOp, Union, Where, indent;

  indent = function(str) {
    var line;
    return ((function() {
      var _i, _len, _ref, _results;
      _ref = str.split("\n");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        _results.push("  " + line);
      }
      return _results;
    })()).join("\n");
  };

  exports.Select = Select = (function() {
    function Select(fields, source, distinct, joins, unions) {
      this.fields = fields;
      this.source = source;
      this.distinct = distinct != null ? distinct : false;
      this.joins = joins != null ? joins : [];
      this.unions = unions != null ? unions : [];
      this.order = null;
      this.group = null;
      this.where = null;
      this.limit = null;
    }

    Select.prototype.toString = function() {
      var join, ret, union, _i, _j, _len, _len1, _ref, _ref1;
      ret = ["SELECT " + (this.fields.join(', '))];
      ret.push(indent("FROM " + this.source));
      _ref = this.joins;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        join = _ref[_i];
        ret.push(indent(join.toString()));
      }
      if (this.where) {
        ret.push(indent(this.where.toString()));
      }
      if (this.group) {
        ret.push(indent(this.group.toString()));
      }
      if (this.order) {
        ret.push(indent(this.order.toString()));
      }
      if (this.limit) {
        ret.push(indent(this.limit.toString()));
      }
      _ref1 = this.unions;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        union = _ref1[_j];
        ret.push(union.toString());
      }
      return ret.join("\n");
    };

    return Select;

  })();

  exports.SubSelect = SubSelect = (function() {
    function SubSelect(select, name) {
      this.select = select;
      this.name = name != null ? name : null;
      null;
    }

    SubSelect.prototype.toString = function() {
      var ret;
      ret = [];
      ret.push('(');
      ret.push(indent(this.select.toString()));
      ret.push(this.name ? ") " + (this.name.toString()) : ")");
      return ret.join("\n");
    };

    return SubSelect;

  })();

  exports.Join = Join = (function() {
    function Join(right, conditions, side, mode) {
      this.right = right;
      this.conditions = conditions != null ? conditions : null;
      this.side = side != null ? side : null;
      this.mode = mode != null ? mode : null;
      null;
    }

    Join.prototype.toString = function() {
      var ret;
      ret = '';
      if (this.side != null) {
        ret += "" + this.side + " ";
      }
      if (this.mode != null) {
        ret += "" + this.mode + " ";
      }
      return ret + ("JOIN " + this.right + "\n") + indent("ON " + this.conditions);
    };

    return Join;

  })();

  exports.Union = Union = (function() {
    function Union(query, all) {
      this.query = query;
      this.all = all != null ? all : false;
      null;
    }

    Union.prototype.toString = function() {
      var all;
      all = this.all ? ' ALL' : '';
      return "UNION" + all + "\n" + (this.query.toString());
    };

    return Union;

  })();

  exports.LiteralValue = LiteralValue = (function() {
    function LiteralValue(value, value2) {
      this.value = value;
      this.value2 = value2 != null ? value2 : null;
      if (this.value2) {
        this.nested = true;
        this.values = this.value.values;
        this.values.push(value2);
      } else {
        this.nested = false;
        this.values = [this.value];
      }
    }

    LiteralValue.prototype.toString = function() {
      return "`" + (this.values.join('.')) + "`";
    };

    return LiteralValue;

  })();

  exports.StringValue = StringValue = (function() {
    function StringValue(value, quoteType) {
      this.value = value;
      this.quoteType = quoteType != null ? quoteType : "''";
      null;
    }

    StringValue.prototype.toString = function() {
      return "" + this.quoteType + this.value + this.quoteType;
    };

    return StringValue;

  })();

  exports.NumberValue = LiteralValue = (function() {
    function LiteralValue(value) {
      this.value = Number(value);
    }

    LiteralValue.prototype.toString = function() {
      return this.value.toString();
    };

    return LiteralValue;

  })();

  exports.ListValue = ListValue = (function() {
    function ListValue(value) {
      this.value = value;
    }

    ListValue.prototype.toString = function() {
      return "(" + (this.value.join(', ')) + ")";
    };

    return ListValue;

  })();

  exports.ArgumentListValue = ArgumentListValue = (function() {
    function ArgumentListValue(value, distinct) {
      this.value = value;
      this.distinct = distinct != null ? distinct : false;
      null;
    }

    ArgumentListValue.prototype.toString = function() {
      if (this.distinct) {
        return "DISTINCT " + (this.value.join(', '));
      } else {
        return "" + (this.value.join(', '));
      }
    };

    return ArgumentListValue;

  })();

  exports.BooleanValue = LiteralValue = (function() {
    function LiteralValue(value) {
      this.value = (function() {
        switch (value.toLowerCase()) {
          case 'true':
            return true;
          case 'false':
            return false;
          default:
            return null;
        }
      })();
    }

    LiteralValue.prototype.toString = function() {
      if (this.value != null) {
        return this.value.toString().toUpperCase();
      } else {
        return 'NULL';
      }
    };

    return LiteralValue;

  })();

  exports.FunctionValue = FunctionValue = (function() {
    function FunctionValue(name, _arguments, udf) {
      this.name = name;
      this["arguments"] = _arguments != null ? _arguments : null;
      this.udf = udf != null ? udf : false;
      null;
    }

    FunctionValue.prototype.toString = function() {
      if (this["arguments"]) {
        return "" + (this.name.toUpperCase()) + "(" + (this["arguments"].toString()) + ")";
      } else {
        return "" + (this.name.toUpperCase()) + "()";
      }
    };

    return FunctionValue;

  })();

  exports.Order = Order = (function() {
    function Order(orderings) {
      this.orderings = orderings;
    }

    Order.prototype.toString = function() {
      return "ORDER BY " + (this.orderings.join(', '));
    };

    return Order;

  })();

  exports.OrderArgument = OrderArgument = (function() {
    function OrderArgument(value, direction) {
      this.value = value;
      this.direction = direction != null ? direction : 'ASC';
      null;
    }

    OrderArgument.prototype.toString = function() {
      return "" + this.value + " " + this.direction;
    };

    return OrderArgument;

  })();

  exports.Limit = Limit = (function() {
    function Limit(value) {
      this.value = value;
      null;
    }

    Limit.prototype.toString = function() {
      return "LIMIT " + this.value;
    };

    return Limit;

  })();

  exports.Table = Table = (function() {
    function Table(name, alias, win, winFn, winArg) {
      this.name = name;
      this.alias = alias != null ? alias : null;
      this.win = win != null ? win : null;
      this.winFn = winFn != null ? winFn : null;
      this.winArg = winArg != null ? winArg : null;
      null;
    }

    Table.prototype.toString = function() {
      if (this.win) {
        return "" + this.name + "." + this.win + ":" + this.winFn + "(" + this.winArg + ")";
      } else if (this.alias) {
        return "" + this.name + " AS " + this.alias;
      } else {
        return this.name.toString();
      }
    };

    return Table;

  })();

  exports.Group = Group = (function() {
    function Group(fields) {
      this.fields = fields;
      this.having = null;
    }

    Group.prototype.toString = function() {
      var ret;
      ret = ["GROUP BY " + (this.fields.join(', '))];
      if (this.having) {
        ret.push(this.having.toString());
      }
      return ret.join("\n");
    };

    return Group;

  })();

  exports.Where = Where = (function() {
    function Where(conditions) {
      this.conditions = conditions;
      null;
    }

    Where.prototype.toString = function() {
      return "WHERE " + this.conditions;
    };

    return Where;

  })();

  exports.Having = Having = (function() {
    function Having(conditions) {
      this.conditions = conditions;
      null;
    }

    Having.prototype.toString = function() {
      return "HAVING " + this.conditions;
    };

    return Having;

  })();

  exports.Op = Op = (function() {
    function Op(operation, left, right) {
      this.operation = operation;
      this.left = left;
      this.right = right;
      null;
    }

    Op.prototype.toString = function() {
      return "(" + this.left + " " + (this.operation.toUpperCase()) + " " + this.right + ")";
    };

    return Op;

  })();

  exports.UnaryOp = UnaryOp = (function() {
    function UnaryOp(operator, operand) {
      this.operator = operator;
      this.operand = operand;
      null;
    }

    UnaryOp.prototype.toString = function() {
      return "(" + (this.operator.toUpperCase()) + " " + this.operand + ")";
    };

    return UnaryOp;

  })();

  exports.Field = Field = (function() {
    function Field(field, name) {
      this.field = field;
      this.name = name != null ? name : null;
      null;
    }

    Field.prototype.toString = function() {
      if (this.name) {
        return "" + this.field + " AS " + this.name;
      } else {
        return this.field.toString();
      }
    };

    return Field;

  })();

  exports.Star = Star = (function() {
    function Star() {
      null;
    }

    Star.prototype.toString = function() {
      return '*';
    };

    Star.prototype.star = true;

    return Star;

  })();

}).call(this);

};require['./parser'] = new function() {
  var exports = this;
  // Generated by CoffeeScript 1.8.0
(function() {
  var buildParser;

  buildParser = function() {
    var parser;
    parser = require('./compiled_parser').parser;
    parser.lexer = {
      lex: function() {
        var tag, _ref;
        _ref = this.tokens[this.pos++] || [''], tag = _ref[0], this.yytext = _ref[1], this.yylineno = _ref[2];
        return tag;
      },
      setInput: function(tokens) {
        this.tokens = tokens;
        return this.pos = 0;
      },
      upcomingInput: function() {
        return "";
      }
    };
    parser.yy = require('./nodes');
    return parser;
  };

  exports.parser = buildParser();

  exports.parse = function(str) {
    return buildParser().parse(str);
  };

}).call(this);

};require['./sql_parser'] = new function() {
  var exports = this;
  // Generated by CoffeeScript 1.8.0
(function() {
  exports.lexer = require('./lexer');

  exports.parser = require('./parser');

  exports.nodes = require('./nodes');

  exports.parse = function(sql) {
    return exports.parser.parse(exports.lexer.tokenize(sql));
  };

}).call(this);

};
    return require['./sql_parser']
  }();

  if(typeof define === 'function' && define.amd) {
    define(function() { return SQLParser });
  } else { root.SQLParser = SQLParser }
}(this));